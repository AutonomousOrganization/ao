// Generated by CoffeeScript 1.12.7
(function() {
  var Bouncing_Ball, Pong, Testing, clear_sidewalk, clr_grad, columns, fullFill, height, npm_opc, strand, stream, width;

  npm_opc = require("./opc_init.js");

  width = npm_opc.width;

  height = npm_opc.height;

  strand = npm_opc.strand;

  columns = npm_opc.columns;

  stream = npm_opc.stream;

  fullFill = function(di, fill) {
    var x, y;
    y = 0;
    while (y < height) {
      x = 0;
      while (x < width) {
        if (Math.random() < fill) {
          columns[x].setPixel(y, (di[1] + 10 * y * x) % 250, (di[1] + 4 * y * x) % 250, (di[1] + 1 * y * x) % 250);
        } else {
          columns[x].setPixel(y, 0, 0, 0);
        }
        x++;
      }
      y++;
    }
    return stream.writePixels(0, strand.buffer);
  };

  Testing = function() {
    var c, i, j, x, y;
    y = 0;
    while (y < height) {
      x = 0;
      while (x < width) {
        columns[x].setPixel(y, 0, 0, 0);
        x++;
      }
      y++;
    }
    c = [155, 155, 155];
    i = 0;
    while (i < height) {
      columns[10].setPixel(i, 255, 23, 242);
      i++;
    }
    columns[5].setPixel(25, c[0], c[1], c[2]);
    j = 0;
    while (j < width) {
      columns[j].setPixel(51, c[0], c[1], c[2]);
      j++;
    }
    return stream.writePixels(0, strand.buffer);
  };

  clr_grad = function() {
    var blue, c, green, i, j, red, x, y;
    y = 0;
    while (y < height) {
      x = 0;
      while (x < width) {
        columns[x].setPixel(y, 0, 0, 0);
        x++;
      }
      y++;
    }
    j = 0;
    while (j < width) {
      red = 255;
      green = 0;
      blue = 255;
      c = [red * j / width, green, blue * (width - j) / width];
      i = 0;
      while (i < height) {
        columns[j].setPixel(i, c[1], c[2], c[0]);
        i++;
      }
      j++;
    }
    return stream.writePixels(0, strand.buffer);
  };

  clear_sidewalk = function() {
    var results, x, y;
    y = 0;
    results = [];
    while (y < height) {
      x = 0;
      while (x < width) {
        columns[x].setPixel(y, 0, 0, 0);
        x++;
      }
      results.push(y++);
    }
    return results;
  };

  module.exports.grad_long = function() {
    var p;
    p = 0;
    return setInterval(function() {
      var blue, green, i, j, pixel, red;
      i = 0;
      while (i < height) {
        if (i < height / 3) {
          green = 0;
          red = 255 - 255 * ((height / 3) - i) / (height / 3);
          blue = 255 - 255 * i / (height / 3);
        } else if (i < 2 * height / 3) {
          green = 255 - 255 * ((2 * height / 3) - i) / (height / 3);
          red = 255 - 255 * (i - (height / 3)) / (height / 3);
          blue = 0;
        } else {
          green = 255 - 255 * (i - (2 * height / 3)) / (height / 3);
          red = 0;
          blue = 255 - 255 * (height - i) / (height / 3);
        }
        j = 0;
        while (j < width) {
          pixel = (i + p) % 62;
          columns[j].setPixel(pixel, green, red, blue);
          j++;
        }
        i++;
      }
      stream.writePixels(0, strand.buffer);
      return p++;
    }, 65);
  };

  Bouncing_Ball = function() {
    var Draw_ball, ballsize, blue, cushion, green, red, x, xacc, xvect, y, yacc, yvect;
    x = 4.5;
    y = 4.5;
    cushion = 4;
    ballsize = 6;
    green = 180;
    red = 180;
    blue = 0;
    Draw_ball = function() {
      var c, clrgradient, dist, i, j;
      i = 0;
      while (i < height) {
        j = 0;
        while (j < width) {
          if (Math.abs(y - i) > (ballsize / 2) || Math.abs(x - j) > (ballsize / 2)) {
            c = [0, 0, 0];
          } else {
            dist = Math.sqrt(Math.pow(x - j, 2) + Math.pow(y - i, 2));
            if (dist <= (ballsize / 4)) {
              c = [green, red, blue];
            } else if (dist <= (ballsize / 2)) {
              clrgradient = (dist - (ballsize / 4)) / (ballsize / 4);
              c = [green - green * clrgradient, red - red * clrgradient, blue - blue * clrgradient];
            } else {
              c = [0, 0, 0];
            }
          }
          columns[j].setPixel(i, c[0], c[1], c[2]);
          j++;
        }
        i++;
      }
      return stream.writePixels(0, strand.buffer);
    };
    xvect = 0.8;
    yvect = 0.4;
    xacc = 0.002;
    yacc = -0.005;
    return setInterval(function() {
      var r;
      Draw_ball();
      if (x < cushion) {
        xvect = xvect * -1;
        xacc = xacc * -1;
      } else if (x > width - cushion) {
        xvect = xvect * -1;
        xacc = xacc * -1;
      }
      if (y < cushion) {
        yvect = yvect * -1;
        yacc = yacc * -1;
      } else if (y > height - cushion) {
        yvect = yvect * -1;
        yacc = yacc * -1;
      }
      x = x + xvect;
      y = y + yvect;
      xvect = xvect + xacc;
      yvect = yvect + yacc;
      r = Math.random();
      if (r < 0.5) {
        return ballsize = ballsize + 0.05;
      } else {
        return ballsize = ballsize - 0.05;
      }
    }, 50);
  };

  Pong = function(x, y, ballsize, green, red, blue) {
    var Draw_ball, cushion, xvect, yvect;
    cushion = 2;
    Draw_ball = function() {
      var c, clrgradient, dist, i, j;
      i = 0;
      while (i < height) {
        j = 0;
        while (j < width) {
          if (Math.abs(y - i) > (ballsize / 2) || Math.abs(x - j) > (ballsize / 2)) {
            c = [0, 0, 0];
          } else {
            dist = Math.sqrt(Math.pow(x - j, 2) + Math.pow(y - i, 2));
            if (dist <= (ballsize / 4)) {
              c = [green, red, blue];
            } else if (dist <= (ballsize / 2)) {
              clrgradient = (dist - (ballsize / 4)) / (ballsize / 4);
              c = [green - green * clrgradient, red - red * clrgradient, blue - blue * clrgradient];
            } else {
              c = [0, 0, 0];
            }
          }
          columns[j].setPixel(i, c[0], c[1], c[2]);
          j++;
        }
        i++;
      }
      return stream.writePixels(0, strand.buffer);
    };
    xvect = 0.3;
    yvect = 0.7;
    return setInterval(function() {
      var xacc, yacc;
      Draw_ball();
      if (x < cushion) {
        xvect = xvect * -1;
        xacc = xacc * -1;
      } else if (x > width - cushion) {
        xvect = xvect * -1;
        xacc = xacc * -1;
      }
      if (y < cushion) {
        yvect = yvect * -1;
        yacc = yacc * -1;
      } else if (y > height - cushion) {
        yvect = yvect * -1;
        yacc = yacc * -1;
      }
      x = x + xvect;
      return y = y + yvect;
    }, 50);
  };

}).call(this);
